import "AMLValidatorUtils.evl";

pre test
{
	//rootModel.println();


}


context CAEX!InterfaceClassLib
{
	constraint IsNameUnique
	{
		/*  This name shall be unique within the hierarchy level of the corresponding AML library over
			the life time of the class.*/
		check
		{
			var duplicates = getDuplicateClassNames(self.interfaceClass);			
					
			return duplicates.isEmpty();
		}
	
		message: "File=" + self.eContainer.filename + " " + "InterfaceClassLib=" + self.name + ": Duplicate Class Names: " + duplicates.toString()
	}
}





context CAEX!InterfaceClass
{
	constraint HasName
	{
		/*According to IEC 62424:2008, A.2.2.1, AML classes (RoleClasses, InterfaceClasses and
		SystemUnitClasses) shall be identified by their CAEX tag “Name”. */

		check: self.name.isDefined()

		message
		{	
			var filename : String = self.eContainer.eContainer.filename;
			var libName : String = self.eContainer.name;
			
			return filename + " - InterfaceClassLib " + libName + ": InterfaceClass without attribute 'name' defined";
		}
	}	
}

context CAEX!SystemUnitClassLib
{
	constraint IsNameUnique
	{
		/*  This name shall be unique within the hierarchy level of the corresponding AML library over
			the life time of the class.*/
		check
		{
			var duplicates = getDuplicateClassNames(self.systemunitclass);			
					
			return duplicates.isEmpty();
		}
	
		message: "File=" + self.eContainer.filename + " " + "SystemUnitClassLib=" + self.name + ": Duplicate Class Names: " + duplicates.toString()
	}
}




context CAEX!SystemUnitClass
{
	constraint HasName
	{
		/*According to IEC 62424:2008, A.2.2.1, AML classes (RoleClasses, InterfaceClasses and
		SystemUnitClasses) shall be identified by their CAEX tag “Name”. */

		check: self.name.isDefined()

		message
		{	
			var filename : String = self.eContainer.eContainer.filename;
			var libName : String = self.eContainer.name;
			
			return filename + " - SystemUnitClassLib " + libName + ": SystemUnitClass without attribute 'name' defined";
		}
	}	
}

context CAEX!RoleClassLib
{
	constraint IsNameUnique
	{
		/*  This name shall be unique within the hierarchy level of the corresponding AML library over
			the life time of the class.*/
		check
		{
			var duplicates = getDuplicateClassNames(self.roleclass);			
					
			return duplicates.isEmpty();
		}
	
		message: "File=" + self.eContainer.filename + " " + "RoleClassLib=" + self.name + ": Duplicate Class Names: " + duplicates.toString()
	}
}


context CAEX!RoleClass
{
	constraint HasName
	{
		/*According to IEC 62424:2008, A.2.2.1, AML classes (RoleClasses, InterfaceClasses and
		SystemUnitClasses) shall be identified by their CAEX tag “Name”. */

		check: self.name.isDefined()

		message
		{	
			var filename : String = self.eContainer.eContainer.filename;
			var libName : String = self.eContainer.name;
			
			return filename + " - RoleClassLib " + libName + ": RoleClass without attribute 'name' defined";
		}
	}	
}

context CAEX!CAEXFile
{
	constraint IsIDGUID
	{
		check
		{
			var instances : Sequence;
			var filename : String;		
			
			instances = self.getAllInternalElements(true);
			instances.addAll(self.getAllExternalInterfaces(true));
			
			filename = self.filename;	
			
						
			var duplicates = instances.getDuplicateIDs();			
					
			return duplicates.isEmpty();		
		} 
		
		message: filename + " Duplicate ID(s) found: " + duplicateIDsToString(duplicates) 
	}	
}

context CAEX!InternalElement
{
	constraint HasID
	{
		check: self.id.isDefined()
		
		message
		{
			var allContainer : Map;
			var file : CAEXFile;
			var instanceHierarchy : InstanceHierarchy;
						
			getAllContainer(self, allContainer);
			file = allContainer.get("CAEXFile");
			instanceHierarchy = allContainer.get("InstanceHierarchy");
			
			return "File=" + file.filename + " InstanceHierarchy=" + instanceHierarchy.name + " InternalElement '" + self.name + "' without ID defined";
		}
	
	}
}

context CAEX!ExternalInterface
{
	constraint HasID
	{
		check: self.id.isDefined()
		
		message
		{
			var allContainer : Map;
			var file : CAEXFile;
									
			getAllContainer(self, allContainer);
			file = allContainer.get("CAEXFile");			
			
			return "File=" + file.filename + self.eContainer.eClass.getName() + "=" + self.eContainer.name + " ExternalInterface '" + self.name + "' without ID defined";
		}	
	}
}

