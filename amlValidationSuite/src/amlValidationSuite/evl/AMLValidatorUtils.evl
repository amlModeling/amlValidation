
operation Set getGenericElement(name : String) : Element
{
	var i : Integer = 0;
	var j : Integer = 0;
	var ret : Element = null;	
	var act : GenericElement = null;	
	
	while(i < self.size() and ret = null)
	{
		//Check if Set is filled with correct Type
		if(self.at(i).isKindOf(Element)) 		
		{		
			act = self.at(i);
						
			if(act.name = name)
			{
				ret = act;
				break;
			}
			else
			{
				while (ret = null and j < act.attributes.size())
				{
					if(act.attributes.at(j).name = name)
					{
						ret = act.attributes.at(j);	
						break;		
					}
					j = j + 1;
				}		
			
				if(ret = null)
				{		
					ret = act.nestedElements.getGenericElement(name);
				}						
			}
			
			i = i +1;
		}
	}	
			
	return ret;
}

operation Set hasGenericElement(name : String) : Boolean
{
	return self.getGenericElement(name) <> null;
}



operation GenericElement getAllChildNodes() : Sequence
{
	var nodeNames : Sequence;
	var i : Integer = 0;
	
	// No recursion - only 1 hierarchy level considered
	while(i < self.nestedElements.size())
	{
		nodeNames.add(self.nestedElements.at(i));
		i = i + 1;
	}	
	
	return nodeNames;
}

operation Sequence getDuplicateElements() : Map
{
	var duplicates : Map;
	var keyMap : Map;
	
	
	for(element : Element in self)
	{
		if(not keyMap.containsKey(element.name))
			keyMap.put(element.name, "");
		else
			duplicates.put(element.name, "");
	
	}	
	
	return duplicates;
}


operation Set toString(): String
{
	var ret : String = "";
	
	for(element : String in self)
	{
		if(ret.isEmpty())
			ret = ret + element;
		else
			ret = ret + ", " + element;
	}
	
	return ret;
}

operation CAEXObject getClasses(): Sequence
{
	var ret : Sequence;
	var classes : OrderedSet;
	
	if(self.isTypeOf(InterfaceClassLib))
		classes = self.interfaceClass;
	else if(self.isTypeOf(SystemUnitClassLib))
		classes = self.systemUnitClass;
	else if(self.isTypeOf(RoleClassLib))
		classes = self.roleClass;
	
	if(classes.size() <> 0)	
	{
		for(class : CAEXObject in classes)
		{
			ret.add(class.name);
		}
	}	
	
	return ret;
}


operation Sequence getDuplicateClasses() : Map
{
	var duplicates : Map;
	var keyMap : Map;	
	
    for(className : String in self)
	{
		if(not keyMap.containsKey(className))
			keyMap.put(className, "");
		else
			duplicates.put(className, "");
	
	}
		
		
	return duplicates;
}





operation CAEXFile satisfiesAll(invariants : Sequence): Boolean
{
	var ret : Boolean = true;
	
	for(invariant : String in invariants)
	{
		ret = ret and self.satisfies(invariant);
	}
	
	return ret;
}



