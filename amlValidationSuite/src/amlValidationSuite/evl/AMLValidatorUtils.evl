
operation GenericElement getAllChildNodes() : Sequence
{
	var nodeNames : Sequence;
	var i : Integer = 0;
	
	// No recursion - only 1 hierarchy level considered
	while(i < self.nestedElements.size())
	{
		nodeNames.add(self.nestedElements.at(i));
		i = i + 1;
	}	
	
	return nodeNames;
}



operation Sequence getDuplicateElements() : Map
{
	var duplicates : Map;
	var keyMap : Map;
	
	
	for(element : Element in self)
	{
		if(not keyMap.containsKey(element.name))
			keyMap.put(element.name, "");
		else
			duplicates.put(element.name, "");
	
	}	
	
	return duplicates;
}



operation getDuplicateClassNames(classes : OrderedSet) : Sequence
{
	var duplicates : Sequence;
	var keyMap : Map;
	var className : String;
		
	
    for(class : CAEXObject in classes)
	{
		className = class.name;
		
		if(not keyMap.containsKey(className))
		{	
			keyMap.put(className, className);
		}
		else
		{
			duplicates.add(className);
		}	
	}		
		
	return duplicates;
}


operation Sequence getDuplicateIDs(): Map
{
	var duplicates : Map;
	var keyMap : Map;	
	
	for(object : CAEXBasicObject in self)
	{
		if(not keyMap.containsKey(object.iD))
		{
			var elements : Sequence;
			
			elements.add(object);
			keyMap.put(object.iD, elements); //Save the object which contains the iD
		}
		else
		{
			var elements : Sequence;
		
			if(not duplicates.containsKey(object.iD))
				elements = keyMap.get(object.iD);
			else
				elements = duplicates.get(object.iD);
			
			elements.add(object);
				
			duplicates.put(object.iD, elements);	
		}
	}	
		
	return duplicates;
}


operation duplicateIDsToString(duplicates : Map) : String
{
	var ret : String = "";
	var elementsWithSameID : Sequence;
	var allContainer : Map;
	var container : CAEXObject;
	
	
	
	for(key : String in duplicates.keyset())
	{
		elementsWithSameID = duplicates.get(key);
		
		for(element : CAEXBasicObject in elementsWithSameID)
		{
			getAllContainer(element, allContainer);
						
			var file = allContainer.get("CAEXFile");
			
			if(element.isTypeOf(InternalElement) or element.eContainer.isTypeOf(InternalElement) )			
				container = allContainer.get("InstanceHierarchy");
			else
			if(element.eContainer.isTypeOf(RoleClass))
				container = allContainer.get("RoleClassLib");
			else
			if(element.eContainer.isTypeOf(SystemUnitClass))
				container = allContainer.get("SystemUnitClassLib");
			
			
			ret += "\nFile="+ file.filename + " " + container.eClass.getName() + "=" + container.name + " type=" + element.eClass.getName() + " ID='" + key + "' Name='" + element.name + "'";			
		}
		ret +="\n";
		
		
	}
	
	return ret;	
}



operation getAllContainer(object : Any, result : Map) 
{
	result.put(object.eClass.getName(), object);
	
	if(object.eContainer <> null)
	{
		getAllContainer(object.eContainer, result);
	}
}





