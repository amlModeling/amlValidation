

operation GenericElement hasAttribute(attributeName : String) : Boolean
{
	var i : Integer = 0;
	var ret : Boolean = false;
	
	if(self.name = attributeName)
		ret =  true;
		
	while (ret <> true and i < self.attributes.size())
	{
		if(self.attributes.at(i).name = attributeName)
		{
			ret = true;	
			break;		
		}
		i = i + 1;
	}	
	
	
	if(ret <> true and not self.nestedElements.isEmpty())
	{
		i = 0;
		
		while (ret <> true and i < self.nestedElements.size())
		{
			i = i + 1;
			ret = (self.nestedElements.at(i - 1)).hasAttribute(attributeName);			
		}		
	}
	
	return ret;
}





/*

operation GenericElement hasAttribute(attributeName : String) : Boolean
{
	var i : Integer = 0;
	var ret : Boolean;
	var elementContents : Sequence;
	
	elementContents = self.eContents();
	
	ret = false;
			
	while (i < elementContents.size())
	{
		if(elementContents.at(i).name = attributeName)
		{
			ret = true;
			break;
		}
		i = i + 1;
	}	
	
	if(ret <> true and not self.nestedElements.isEmpty())
	{
		//Check nested elements recursive 
		return (self.nestedElements).hasAttribute(attributeName);		
	}
	
	return ret;
}

*/

// Liefert Wert von 1. Fund mit attributNamen attributeName
operation GenericElement getAttributeValue(attributeName : String) : String
{
	var i : Integer = 0;
	var ret : String;
	var bFound : Boolean;
	var elementContents : Sequence;
	
	elementContents = self.eContents();
	
	ret = "";
	bFound = false;
			
	while (i < elementContents.size())
	{
		if(elementContents.at(i).name = attributeName)
		{
			ret = elementContents.at(i).value;
			bFound = true;
			break;
		}
		i = i + 1;
	}
	
	if(bFound <> true and not self.nestedElements.isEmpty())
	{
		//Check nested elements recursive 
		return (self.nestedElements).getAttributeValue(attributeName);		
	}	
	
	return ret;
}







operation isAutomationMLVersion_GenericElement(element : GenericAnyType) : Boolean
{
	return true;




}


operation isWriteHeader_GenericElement(element : GenericAnyType) : Boolean
{

	return true;


}





operation hasGenericChildElements(element : GenericAnyType) : Boolean
{




}