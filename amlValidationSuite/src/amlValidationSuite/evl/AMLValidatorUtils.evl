
operation GenericElement getAllChildNodes() : Sequence
{
	var nodeNames : Sequence;
	var i : Integer = 0;
	
	// No recursion - only 1 hierarchy level considered
	while(i < self.nestedElements.size())
	{
		nodeNames.add(self.nestedElements.at(i));
		i = i + 1;
	}	
	
	return nodeNames;
}



operation Sequence getDuplicateElements() : Map
{
	var duplicates : Map;
	var keyMap : Map;
	
	
	for(element : Element in self)
	{
		if(not keyMap.containsKey(element.name))
			keyMap.put(element.name, "");
		else
			duplicates.put(element.name, "");
	
	}	
	
	return duplicates;
}



operation getDuplicateClassNames(classes : OrderedSet) : Sequence
{
	var duplicates : Sequence;
	var keyMap : Map;
	var className : String;
		
	
    for(class : CAEXObject in classes)
	{
		className = class.name;
		
		if(not keyMap.containsKey(className))
		{	
			keyMap.put(className, className);
		}
		else
		{
			duplicates.add(className);
		}	
	}		
		
	return duplicates;
}


operation Sequence getDuplicateIDs(): Map
{
	var duplicates : Map;
	var keyMap : Map;	
	
	for(object : CAEXBasicObject in self)
	{
		if(not keyMap.containsKey(object.iD))
		{
			var elements : Sequence;
			
			elements.add(object);
			keyMap.put(object.iD, elements); //Save the object which contains the iD
		}
		else
		{
			var elements : Sequence;
		
			if(not duplicates.containsKey(object.iD))
				elements = keyMap.get(object.iD);
			else
				elements = duplicates.get(object.iD);
			
			elements.add(object);
				
			duplicates.put(object.iD, elements);	
		}
	}	
		
	return duplicates;
}


operation duplicateIDsToString(duplicates : Map) : String
{
	var ret : String = "";
	var elementsWithSameID : Sequence;
	var allContainer : Map;
	var container : CAEXObject;
	
	
	
	for(key : String in duplicates.keyset())
	{
		elementsWithSameID = duplicates.get(key);
		
		for(element : CAEXBasicObject in elementsWithSameID)
		{
			allContainer.clear();
			getAllContainer(element, allContainer);
						
			var file = allContainer.get("CAEXFile");
			
			if(allContainer.get("InstanceHierarchy") <> null)			
				container = allContainer.get("InstanceHierarchy");
			else
			if(allContainer.get("RoleClassLib") <> null)
				container = allContainer.get("RoleClassLib");
			else
			if(allContainer.get("SystemUnitClassLib") <> null)
				container = allContainer.get("SystemUnitClassLib");
			
			ret += "\nFile="+ file.filename + " " + container.eClass.getName() + "=" + container.name + " type=" + element.eClass.getName() + " ID='" + key + "' Name='" + element.name + "'";			
		}
		ret +="\n";
		
		
	}
	
	return ret;	
}


operation getAllContainer(object : Any, result : Map) 
{
	result.put(object.eClass.getName(), object);
	
	if(object.eContainer <> null)
	{
		getAllContainer(object.eContainer, result);
	}
}


/* No idea how to implement that as RegEx */
operation prepareRefBaseClassPath(path : String) : Map
{
	var LinkedModul : String;
	var Lib : String;
	var Class : String;
	var objectMap : Map;
	
	var Token : String;
	var Attribut : String;
	var Interface : String;
	var aktChar : String;
	
	var Path : Sequence;
	var i : Integer = 0;
		
	var inBracket : Boolean = false;	
	var LibModus : Boolean = true;
	
	var LastTokenBegin : Integer = 0;
	
	
	while (i < path.length())
	{
		aktChar = "" + path.charAt(i);				
		
		if(aktChar = "[")
		{
			inBracket = true;			
		}else		
		if(aktChar = "]")
		{
			inBracket = false;			
		}else		
		if(aktChar = "/" and inBracket = false)
		{
			Token = replaceChars(path.substring(LastTokenBegin, i));
			
			if(LibModus)
			{
				Lib = Token;								
				LibModus = false;				
			}
			else
				Path.add(Token);			
						
			LastTokenBegin = i+1;
		}else				
		if(aktChar = "@" and inBracket = false)
		{
			LinkedModul = replaceChars(path.substring(LastTokenBegin, i));
			LastTokenBegin = i+1;
		}else		
		if(aktChar = "." and inBracket = false)
		{
			Token = replaceChars(path.substring(LastTokenBegin, i));		
			
			Path.add(Token);
			LastTokenBegin = i+1;
			
			Attribut = replaceChars(path.substring(LastTokenBegin, path.length()));
						
			LastTokenBegin = path.length();
			
		}else		
		if(aktChar = ":" and inBracket = false)
		{
		 	Token = replaceChars(path.substring(LastTokenBegin, i));			
			
			Path.add(Token);
			LastTokenBegin = i+1;
			Interface = replaceChars(path.substring(LastTokenBegin, path.length()));
						
			LastTokenBegin = path.length();			
		}
		
		i = i + 1;
	}
	
	if(LastTokenBegin <> i)
	{
		Token = replaceChars(path.substring(LastTokenBegin, i));
			
		Path.add(Token);
	}		
	
	
	objectMap.put("ExtRef", LinkedModul);
	objectMap.put("Lib", Lib);
	objectMap.put("Path", Path);
	objectMap.put("Attribut", Attribut);
	objectMap.put("Interface", Interface);	
	
	objectMap.println();
		
	return objectMap;
}

operation replaceChars(token : String) : String
{
	token = token.replace("\\[", "");
	token = token.replace("\\]", "");
	
	return token;
}


operation CAEXObject isAMLBaseClass() : Boolean
{
	var ret : Boolean = false;
	
	if(self.isTypeOf(SystemUnitClass) or
	   self.isTypeOf(InterfaceClass) or 
	   self.isTypeOf(RoleClass))
	   ret = true;
	
	return ret;
}


operation CAEXObject checkRefBaseClassPath(pathMap : Map, eContainer : CAEXObject) : String
{
	var extRef : String;
	var lib : String;
	var caex : CAEXFile = null;
	var path : Sequence;
	var attrib : String;
	var interface : String;
		
	extRef = pathMap.get("ExtRef");
	lib    = pathMap.get("Lib");
	path   = pathMap.get("Path");	
	interface = pathMap.get("Interface");
	
	var library : CAEXObject = null;
	var class : CAEXObject = null;
	
	//One hierarchy level above
	if(extRef ="" and lib = "" and interface = "" and path.size() = 1)
	{
		if(path.at(0).println() <> eContainer.name.println())
			return self.errorClassNotFound(path.at(0));
		else
			return "";
	}
	
	if(extRef <> "")
		caex = RootModel.getLinkedModel(extRef);
	else
		caex = RootModel;
		
	if(caex = null)
		return "External Reference " + extRef + " not found";
		
    library = self.getLibrary(lib, caex);
    
    if(library == null)
		return self.errorLibNotFound(lib);
	
	for(aktPath : String in path)
	{
		if(class = null)
			class = library.getClass(aktPath);
		else
			class = class.getClass(aktPath);	
			
		if(class = null)
			return self.errorClassNotFound(aktPath);
	}	
	
	return "";		
}

operation SystemUnitClass errorLibNotFound(lib : String) : String
{
	return "SystemUnitClassLib " + lib + " not found";
}

operation RoleClass errorLibNotFound(lib : String) : String
{
	return "RoleClassLib " + lib + " not found";
}

operation InterfaceClass errorLibNotFound(lib : String) : String
{
	return "InterfaceClassLib " + lib + " not found";
}


operation SystemUnitClass errorClassNotFound(class : String) : String
{
	return "SystemUnitClass " + class + " not found";
}

operation RoleClass errorClassNotFound(class : String) : String
{
	return "RoleClass " + class + " not found";
}

operation InterfaceClass errorClassNotFound(class : String) : String
{
	return "InterfaceClass " + class + " not found";
}


operation SystemUnitClass getLibrary(lib : String, caexFile : CAEXFile) : SystemUnitClassLib
{
	return caexFile.getSystemUnitClassLib(lib);
}

operation RoleClass getLibrary(lib : String, caexFile : CAEXFile) : RoleClassLib
{
	return caexFile.getRoleClassLib(lib);
}

operation InterfaceClass getLibrary(lib : String, caexFile : CAEXFile) : InterfaceClassLib
{
	return caexFile.getInterfaceClassLib(lib);
}


operation SystemUnitClass getClass(class : String) : SystemUnitClass
{
	return self.getSystemUnitClass(class);
}

operation RoleClass getClass(class : String) :RoleClass
{
	return self.getRoleClass(class);
}

operation InterfaceClass getClass(class : String) :InterfaceClass
{
	return self.getInterfaceClass(class);
}

operation SystemUnitClassLib getClass(class : String) : SystemUnitClass
{
	return self.getSystemUnitClass(class);
}

operation RoleClassLib getClass(class : String) :RoleClass
{
	return self.getRoleClass(class);
}

operation InterfaceClassLib getClass(class : String) :InterfaceClass
{
	return self.getInterfaceClass(class);
}