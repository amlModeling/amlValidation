
operation Set getGenericElement(name : String) : Element
{
	var i : Integer = 0;
	var j : Integer = 0;
	var ret : Element = null;	
	var act : GenericElement = null;	
	
	while(i < self.size() and ret = null)
	{
		//Check if Set is filled with correct Type
		if(self.at(i).isKindOf(Element)) 		
		{		
			act = self.at(i);
						
			if(act.name = name)
			{
				ret = act;
				break;
			}
			else
			{
				while (ret = null and j < act.attributes.size())
				{
					if(act.attributes.at(j).name = name)
					{
						ret = act.attributes.at(j);	
						break;		
					}
					j = j + 1;
				}		
			
				if(ret = null)
				{		
					ret = act.nestedElements.getGenericElement(name);
				}						
			}
			
			i = i +1;
		}
	}	
			
	return ret;
}

operation Set hasGenericElement(name : String) : Boolean
{
	return self.getGenericElement(name) <> null;
}



operation GenericElement getAllChildNodeNames() : Sequence
{
	var nodeNames : Sequence;
	var i : Integer = 0;
	
	// No recursion - only 1 hierarchy level considered
	while(i < self.nestedElements.size())
	{
		nodeNames.add(self.nestedElements.at(i).name);
		i = i + 1;
	}
	
	
	return nodeNames;
}

operation Sequence getDuplicates() : Sequence
{
	var duplicates : Sequence;
	var keyMap : Map;
	
	
	for(key : String in self)
	{
		if(not keyMap.containsKey(key))
			keyMap.put(key, "");
		else
			duplicates.add(key);
	
	}
	
	
	return duplicates;
}

