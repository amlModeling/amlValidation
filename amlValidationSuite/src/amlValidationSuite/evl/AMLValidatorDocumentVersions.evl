import "AMLValidatorUtils.evl";



context CAEX!CAEXFile
{		
	constraint HasAttributeAutomationMLVersion
	{
		/* The element “AdditionalInformation” shall have an attribute “AutomationMLVersion”. */
		
		guard: self.satisfies("HasElementAdditionalInformation")
		
		check: self.additionalInformation.hasGenericElement("AutomationMLVersion")
		
		message : self.filename + ": No Attribute <AdditionalInformation>.AutomationMLVersion defined"
	}
		
	
	constraint HasCorrectAutomationMLVersion
	{
		/* The value of this attribute “AutomationMLVersion” shall be stored in the XML document. It
		   shall be “2.0” to correspond to this standard. 
		*/ 
		
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check
		{ 
			var documentAMLVersion = self.additionalInformation.getGenericElement("AutomationMLVersion").value;			
			return documentAMLVersion = AutomationMLVersion;		
		}		  
		
		message
		{									 
			return self.filename + ": <AdditionalInformation>.AutomationMLVersion '" + documentAMLVersion + "' found - Expected: '" + AutomationMLVersion	+ "'";
		} 
	}
	
	
	constraint HasAutomationMLVersionOfRootModel
	{
		/* Every referenced CAEX document shall follow the same AML version of the root document.
		   Mixing of documents with different AML versions is explicitly forbidden.
		*/
			
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check 
		{
			var documentAMLVersion = self.additionalInformation.getGenericElement("AutomationMLVersion").value; 
			return documentAMLVersion = RootModelAutomationMLVersion;		
		}	
		
		message
		{							 
			return self.filename + ": <AdditionalInformation>.AutomationMLVersion '" + documentAMLVersion + "' not consistent with RootModel-AutomationMLVersion - Expected: '" + RootModelAutomationMLVersion	+ "'";
		}				
	}


	
	constraint HasCorrectCAEXSchemaVersion
	{
		/* IEC 62714 is based on the following document formats:
		   CAEX version 2.15;
		*/
		
		check:	self.schemaVersion = CAEXSChemaVersion
		
		message : self.filename + ": <CAEXFile>.SchemaVersion '" + self.schemaVersion + "' found - Expected: '" + CAEXSChemaVersion	+ "'"
	}	
	
	constraint HasCAEXSchemaVersionOfRootModel
	{
		/* Every referenced external document shall also follow the named schema versions specified
		   in the above AML version specification. Mixing of external document versions outside
		   of one AML version specification is explicitly forbidden.
		*/				
		
		check 
		{
			var documentCAEXSchemaVersion = self.schemaVersion;			
			return documentCAEXSchemaVersion = RootModelCAEXSchemaVersion;	
		}	
	
		message : self.filename + ": <CAEXFile>.SchemaVersion '" + documentCAEXSchemaVersion + "' not consistent with RootModel-SchemaVersion - Expected: '" + RootModelCAEXSchemaVersion	+ "'"	
	}	
} 

context CAEX!CAEXObject
{
	constraint HasLibraryVersion
	{
		/* Every AML standard library and every user defined AML library shall define its version
		   number utilizing the CAEX element “Version”. The syntax of the value of the version number
		   is not defined in this part of IEC 62714. */
		   
		guard: self.isTypeOf(InterfaceClassLib) or 
		       self.isTypeOf(SystemUnitClassLib) or 
		       self.isTypeOf(RoleClassLib)
	
		check: self.version.isDefined()
		
		message
		{
			if(self.isTypeOf(InterfaceClassLib))
			{
				return self.eContainer.filename + ": <InterfaceClassLib>.Version is not defined";			
			}else			
			if(self.isTypeOf(SystemUnitClassLib))
			{
				return self.eContainer.filename + ": <SystemUnitClassLib>.Version is not defined";			
			}else			
			if(self.isTypeOf(RoleClassLib))
			{
				return self.eContainer.filename + ": <RoleClassLib>.Version is not defined";			
			}		
		}	
	}
}