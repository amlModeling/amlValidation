import "AMLValidatorUtils.evl";



context CAEX!CAEXFile
{		
	constraint HasAttributeAutomationMLVersion
	{
		/* The element “AdditionalInformation” shall have an attribute “AutomationMLVersion”. */
		
		guard: self.satisfies("HasElementAdditionalInformation")
		
		check: self.getAdditionalInformationEntry("AutomationMLVersion", self.additionalInformation) <> null
				
		message
		{
			return ValidationExecution.addError(self.filename, "", "", "HasAttributeAutomationMLVersion", "No Attribute <AdditionalInformation>.AutomationMLVersion defined");			
						
		} 
		

	}
		
	
	constraint HasCorrectAutomationMLVersion
	{
		/* The value of this attribute “AutomationMLVersion” shall be stored in the XML document. It
		   shall be “2.0” to correspond to this standard. 
		*/ 
		
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check
		{ 
			var documentAMLVersion = self.getAdditionalInformationEntry("AutomationMLVersion", self.additionalInformation).value;
			return documentAMLVersion = AutomationMLVersion;		
		}		  
		
		message
		{	
			return ValidationExecution.addError(self.filename, AutomationMLVersion, documentAMLVersion, "HasCorrectAutomationMLVersion", "");								 
			 
		} 
	}
	
	
	constraint HasAutomationMLVersionOfRootModel
	{
		/* Every referenced CAEX document shall follow the same AML version of the root document.
		   Mixing of documents with different AML versions is explicitly forbidden.
		*/
			
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check 
		{			
			var documentAMLVersion = self.getAdditionalInformationEntry("AutomationMLVersion", self.additionalInformation).value; 
			return documentAMLVersion = RootModelAutomationMLVersion;		
		}	
		
		message
		{	
			return ValidationExecution.addError(self.filename, RootModelAutomationMLVersion, documentAMLVersion, "HasAutomationMLVersionOfRootModel", "<AdditionalInformation>.AutomationMLVersion not consistent with RootModel-AutomationMLVersion");						 
		}				
	}	
} 


context CAEX!InterfaceClassLib
{
	constraint HasLibraryVersion
	{
		/* Every AML standard library and every user defined AML library shall define its version
		   number utilizing the CAEX element “Version”. The syntax of the value of the version number
		   is not defined in this part of IEC 62714. */

		check: self.version.isDefined()
		
		message: self.eContainer.filename + ": <InterfaceClassLib>.Version is not defined"
	}
}

context CAEX!SystemUnitClassLib
{
	constraint HasLibraryVersion
	{
		/* Every AML standard library and every user defined AML library shall define its version
		   number utilizing the CAEX element “Version”. The syntax of the value of the version number
		   is not defined in this part of IEC 62714. */

		check: self.version.isDefined()
		
		message: self.eContainer.filename + ": <SystemUnitClassLib>.Version is not defined"
	}
}


context CAEX!RoleClassLib
{
	constraint HasLibraryVersion
	{
		/* Every AML standard library and every user defined AML library shall define its version
		   number utilizing the CAEX element “Version”. The syntax of the value of the version number
		   is not defined in this part of IEC 62714. */

		check: self.version.isDefined()
		
		message: self.eContainer.filename + ": <RoleClassLib>.Version is not defined"
	}
}