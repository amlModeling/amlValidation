import "AMLValidatorUtils.evl";



context CAEX!CAEXFile
{	
	
	constraint HasAttributeAutomationMLVersion
	{
		/* The element “AdditionalInformation” shall have an attribute “AutomationMLVersion”. */
		
		guard: self.satisfies("HasElementAdditionalInformation")
		
		check
		{ 
			/* As every CAEX document needs an AutomationMLVersion, 
			   we use all instances of AdditionalInformation (attention - linked CAEX documents)
			   and check if there is AutomationMLVersion available in every file */
			
			var automationMLVersion = CAEX!AdditionalInformation.allInstances.
				select(inst| inst.hasAttribute("AutomationMLVersion") and 
				             inst.eContainer.fileName = self.fileName);
						
			return automationMLVersion.size() = 1;		
		}
		
		message : self.filename + ": No Attribute <AdditionalInformation>.AutomationMLVersion defined"
	}
	
	
	
	constraint HasCorrectAutomationMLVersion
	{
		/* The value of this attribute “AutomationMLVersion” shall be stored in the XML document. It
		   shall be “2.0” to correspond to this standard. 
		*/ 
		
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check
		{ 
			/* As every CAEX document needs an AutomationMLVersion, 
			   we use all instances of AdditionalInformation (attention - linked caex caex documents)
			   and check if AutomationMLVersion is correct in every file */
			
			var additionalInformations = CAEX!AdditionalInformation.allInstances.
				select(inst| inst.getAttributeValue("AutomationMLVersion") = AutomationMLVersion and 
							 inst.eContainer.fileName = self.fileName);
		
			return additionalInformations.size() = 1;		
		}
		  
		
		message
		{
			var additionalInformations =  CAEX!AdditionalInformation.allInstances.
				select(inst| inst.getAttributeValue("AutomationMLVersion") <> "" and 
							 inst.eContainer.fileName = self.fileName);
			
			var incorrectAMLVersion = additionalInformations.attributes.at(0).at(0).value;
							 
			return self.filename + ": <AdditionalInformation>.AutomationMLVersion '" + incorrectAMLVersion + "' found - Expected: '" + AutomationMLVersion	+ "'";
		} 
	}
	
	
	constraint HasAutomationMLVersionOfRootModel
	{
		/* Every referenced CAEX document shall follow the same AML version of the root document.
		   Mixing of documents with different AML versions is explicitly forbidden.
		*/
			
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check 
		{
			var additionalInformations = CAEX!AdditionalInformation.allInstances.
				select(inst| inst.getAttributeValue("AutomationMLVersion") = RootModelAutomationMLVersion and 
							 inst.eContainer.fileName = self.fileName);
		
			return additionalInformations.size() = 1;	
		}	
		
		message
		{
			var additionalInformations =  CAEX!AdditionalInformation.allInstances.
				select(inst| inst.getAttributeValue("AutomationMLVersion") <> "" and 
							 inst.eContainer.fileName = self.fileName);
			
			var incorrectAMLVersion = additionalInformations.attributes.at(0).at(0).value;
							 
			return self.filename + ": <AdditionalInformation>.AutomationMLVersion '" + incorrectAMLVersion + "' not consistent with RootModel-AutomationMLVersion - Expected: '" + RootModelAutomationMLVersion	+ "'";
		}	
			
	}


	
	constraint HasCorrectCAEXSchemaVersion
	{
		/* IEC 62714 is based on the following document formats:
		   CAEX version 2.15;
		*/
		
		check:	self.schemaVersion = CAEXSChemaVersion
		
		message : self.filename + ": <CAEXFile>.SchemaVersion '" + self.schemaVersion + "' found - Expected: '" + CAEXSChemaVersion	+ "'"
	}	
	
	constraint HasCAEXSchemaVersionOfRootModel
	{
		/* Every referenced external document shall also follow the named schema versions specified
		   in the above AML version specification. Mixing of external document versions outside
		   of one AML version specification is explicitly forbidden.
		*/				
		
		check 
		{
			var actCAEXSchemaVersion = self.schemaVersion;
			
			return actCAEXSchemaVersion = RootModelCAEXSchemaVersion;	
		}	
	
		message : self.filename + ": <CAEXFile>.SchemaVersion '" + actCAEXSchemaVersion + "' not consistent with RootModel-SchemaVersion - Expected: '" + RootModelCAEXSchemaVersion	+ "'"	
	}	
} 

context CAEX!CAEXObject
{
	constraint HasLibraryVersion
	{
		/* Every AML standard library and every user defined AML library shall define its version
		   number utilizing the CAEX element “Version”. The syntax of the value of the version number
		   is not defined in this part of IEC 62714. */
		   
		guard: self.isTypeOf(InterfaceClassLib) or 
		       self.isTypeOf(SystemUnitClassLib) or 
		       self.isTypeOf(RoleClassLib)
	
		check: self.version.isDefined()
		
		message
		{
			if(self.isTypeOf(InterfaceClassLib))
			{
				return self.eContainer.filename + ": <InterfaceClassLib>.Version is not defined";			
			}else			
			if(self.isTypeOf(SystemUnitClassLib))
			{
				return self.eContainer.filename + ": <SystemUnitClassLib>.Version is not defined";			
			}else			
			if(self.isTypeOf(RoleClassLib))
			{
				return self.eContainer.filename + ": <RoleClassLib>.Version is not defined";			
			}		
		}	
	}
}