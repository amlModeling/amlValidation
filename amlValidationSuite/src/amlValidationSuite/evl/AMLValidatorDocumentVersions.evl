import "AMLValidatorUtils.evl";



context CAEX!CAEXFile
{		
	constraint HasAttributeAutomationMLVersion
	{
		/* The element “AdditionalInformation” shall have an attribute “AutomationMLVersion”. */
		
		guard: self.satisfies("HasElementAdditionalInformation")
		
		check: self.getAdditionalInformationEntry("AutomationMLVersion", self.additionalInformation) <> null
				
		message
		{
		   return ValidationExecution.addError(self.filename, "", "", "HasAttributeAutomationMLVersion", "No Attribute <AdditionalInformation>.AutomationMLVersion defined");			
		} 
	}
		
	
	constraint HasCorrectAutomationMLVersion
	{
		/* The value of this attribute “AutomationMLVersion” shall be stored in the XML document. It
		   shall be “2.0” to correspond to this standard. 
		*/ 
		
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check
		{ 
			var documentAMLVersion = self.getAdditionalInformationEntry("AutomationMLVersion", self.additionalInformation).value;
			return documentAMLVersion = AutomationMLVersion;		
		}		  
		
		message
		{	
			return ValidationExecution.addError(self.filename, AutomationMLVersion, documentAMLVersion, "HasCorrectAutomationMLVersion", "");								 
		} 
	}
	
	
	constraint HasAutomationMLVersionOfRootModel
	{
		/* Every referenced CAEX document shall follow the same AML version of the root document.
		   Mixing of documents with different AML versions is explicitly forbidden.
		*/
			
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check 
		{			
			var documentAMLVersion = self.getAdditionalInformationEntry("AutomationMLVersion", self.additionalInformation).value; 
			return documentAMLVersion = RootModelAutomationMLVersion;		
		}	
		
		message
		{	
			return ValidationExecution.addError(self.filename, RootModelAutomationMLVersion, documentAMLVersion, "HasAutomationMLVersionOfRootModel", "<AdditionalInformation>.AutomationMLVersion not consistent with RootModel-AutomationMLVersion");						 
		}				
	}	
} 


context CAEX!CAEXObject
{
	constraint HasLibraryVersion
	{
		guard: self.isTypeOf(InterfaceClassLib) or
			   self.isTypeOf(SystemUnitClassLib) or
			   self.isTypeOf(RoleClassLib)
			   
		check: self.version.isDefined()
		
		message
		{
			return ValidationExecution.addError(self.eContainer.filename, "", "", "HasLibraryVersion", self.errorVersionNotFound());
		} 
	}
}