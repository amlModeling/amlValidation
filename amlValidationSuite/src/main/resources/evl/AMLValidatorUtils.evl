pre
{
	debugOutput("AMLValidator-Pre");
	//Alle Files in Map ablegen
		
	var colCAEXFiles : Collection;
	var mapCAEXFiles : Map;
	
	var colExternalReferences : Collection;	
	var colInternalElements : Collection;
	
	var mapIDs : Map;	
	
		
	
	colCAEXFiles = CAEXFile.getAllOfKind();
	colExternalReferences = ExternalReference.getAllOfKind();
	
	//Alle Files für spätere Zugriffe in eine Map einfügen
	for (file : CAEXFile in colCAEXFiles)
	{
		mapCAEXFiles.put(file.filename, file);	
	}
	
	colInternalElements   = CAEX!InternalElement.getAllOfType();			
	colExternalReferences = CAEX!ExternalInterface.getAllOfType();
	
	
	for (internalElement : InternalElement in colInternalElements)
	{
		updateIDMap(mapIDs, internalElement.ID);
		
	}
	
	for (externalInt : ExternalInterface in colExternalReferences)
	{
		updateIDMap(mapIDs, externalInt.ID);
	}
	
		
}







operation updateIDMap(mapIDs : Map, id : String)
{
	var anz_aktID : Integer;
	
	if (mapIDs.containsKey(id))
	{
		anz_aktID = mapIDs.get(id);
		anz_aktID = anz_aktID +1;
		mapIDs.put(id, anz_aktID);
	}
	else
		mapIDs.put(id, 1);
}


operation getAnzForID(id : String) : Integer
{
	return mapIDs.get(id);
}



operation isBaseClassDerivedFrom(searchCategory : String, baseClassName : String) : Boolean
{
	if (searchCategory == "AutomationMLBaseInterfaces")
	{
		if (baseClassName == "AutomationMLBaseInterface" or
			baseClassName == "Order" or
			baseClassName == "PortConnector" or
			baseClassName == "PPRConnector" or
			baseClassName == "ExternalDataConnector" or
			baseClassName == "COLLADAInterface" or
			baseClassName == "PLCopenXMLInterface" or
			baseClassName == "Communication" or
			baseClassName == "SignalInterface")
			return true;
		else
			return false;
	}
	else
	if (searchCategory == "AutomationMLBaseInterfaces_Extended")
	{
		if (baseClassName == "AutomationMLBaseInterface" or
			baseClassName == "Order" or
			baseClassName == "PortConnector" or
			baseClassName == "PPRConnector" or
			baseClassName == "ExternalDataConnector" or
			baseClassName == "COLLADAInterface" or
			baseClassName == "PLCopenXMLInterface" or
			baseClassName == "Communication" or
			baseClassName == "SignalInterface" or
			baseClassName == "LogicInterface" or
			baseClassName == "SequencingLogicInterface" or
			baseClassName == "BehaviourLogicInterface" or
			baseClassName == "SequencingBehaviourLogicInterface" or
			baseClassName == "LogicElementInterface" or
			baseClassName == "VariableInterface" or
			baseClassName == "InterlockingVariableInterface" or
			baseClassName == "InterlockingLogicInterface")			
			return true;
		else
			return false;
	}
	else
	if (searchCategory == "AutomationMLBaseRoles")
	{
		if (baseClassName == "AutomationMLBaseRole" or
			baseClassName == "Group" or
			baseClassName == "Facet" or
			baseClassName == "Product" or
			baseClassName == "Process" or
			baseClassName == "Structure" or
			baseClassName == "ProductStructure" or
			baseClassName == "ProcessStructure" or
			baseClassName == "ResourceStructure" or
			baseClassName == "PropertySet" or
			baseClassName == "Resource" or
			baseClassName == "Port")
			return true;
		else
			return false;
	}
	else if (searchCategory == "Order")
	{
		if (baseClassName == "Order")
			return true;
		else
			return false;
	}
	else if (searchCategory == "ExternalDataConnector")
	{
		if (baseClassName == "ExternalDataConnector")
			return true;
		else
			return false;
	}
	else if (searchCategory == "Port")
	{
		if (baseClassName == "Port")
			return true;
		else
			return false;
	}
	else if (searchCategory == "PortConnector")
	{
		if (baseClassName == "PortConnector")
			return true;
		else
			return false;
	}else if (searchCategory == "Facet")
	{
		if (baseClassName == "Facet")
			return true;
		else
			return false;
	}else if (searchCategory == "Group")
	{
		if (baseClassName == "Group")
			return true;
		else
			return false;
	}else if (searchCategory == "PropertySet")
	{
		if (baseClassName == "PropertySet")
			return true;
		else
			return false;
	}
} 





operation Map isPathMirrorObject() : Boolean
{
	var lib : String;
	var path : Sequence;
	var libAlias : String;
	var identifier : String;
	var interface : String;
	
	lib    = self.get("Lib");
	path   = self.get("Path");
	libAlias = self.get("Alias");	
	identifier = self.get("Identifier");
	interface = self.get("Interface");
	
	if (lib.Length() == 0 and path.size() == 0 and interface.Length() == 0 and libAlias.Length() == 0 and identifier.Length() > 0 )
		return true;
	else
		return false;
}






operation CAEXObject isClassChildOf(erg : Map, searchCategory : String, libType : String) : Boolean
{
	var baseClass : InterfaceClass = null; 
	var mapPath : Map;
	
	if (isBaseClassDerivedFrom(searchCategory, self.name))
	{		
		return true;
	}
	if(self.refBaseClassPath.isDefined())
	{
		var searchParent : Boolean = true;
		var mirrorSearch : Boolean = false;
		var ret : Boolean;
		var retMap : Map;
		
		mapPath = parsePath(self.refBaseClassPath);
		ret = self.searchItem(mapPath, searchParent, mirrorSearch, retMap, libType);
		if (ret == false)
		{
			erg.put("ErrorMsg", retMap.get("ErrorMsg"));			
			erg.put("MissingObject", retMap.get("MissingObject"));
			return false;
		}
		else 
			return retMap.get("obj").isClassChildOf(erg, searchCategory, libType);			
	}
}

operation InternalElement isPropertySetInstance() : Boolean
{		
	var isPropertySet = self.roleRequirements.isDefined() and self.hasRoleRequirementPropertySet();
	
	return isPropertySet;
}


operation SystemUnitClass hasRoleRequirementPropertySet() : Boolean
{
	var ergMap : Map;
	var ergMap1 : Map;
	var mapPath : Map;	
	var searchParent : Boolean = false;
	var mirrorSearch : Boolean = false;
	var ret : Boolean;
	var baseRoleClass : RoleClass;	
	
	//Zunächst den Klassennamen im Rolerequirement parsen
	mapPath = parsePath(self.roleRequirements.refBaseRoleClassPath);
	
	//Dann die konkrete Role-Class ermitteln	
	ret = self.roleRequirements.searchItem(mapPath, searchParent, mirrorSearch, ergMap, "RoleClass");
	baseRoleClass = ergMap.get("obj");
	
	
	if(baseRoleClass.isDefined() and baseRoleClass.isClassChildOf(ergMap1, "PropertySet", "RoleClass") == true ) //and not isBaseClassDerivedFrom("AutomationMLBaseInterfaces_Extended", self.name))
	{		
		return true;
	}
	else
	{	
		return false;
	}
}





operation SystemUnitClass isClassRoleOf(erg : Map) : Boolean
{
	var roleClass : RoleClass = null; 
	var mapPath : Map;
	var retMap : Map;
	var ret : Boolean;
	var searchParent : Boolean = false;
	var mirrorSearch : Boolean = false;
	
	
	for (aktSupportedRoleClass : SupportedRoleClass in self.supportedRoleClass)
	{
		//Zuerst durchsuchen wir, ob es eine SupportedRoleClass gibt
	
		mapPath = parsePath(aktSupportedRoleClass.refRoleClassPath);
		
		ret = self.searchItem(mapPath, searchParent, mirrorSearch, retMap, "RoleClass");
		
		if (ret == true)
		{	
			roleClass = retMap.get("obj");
			if(roleClass.isClassChildOf(retMap,"AutomationMLBaseRoles", "RoleClass"))
				return true;					
		}
	}
	
	//Wenn nicht, muss man prüfen, ob eine Basisklasse ggf eine Beziehung zu einer RoleClass hat
	
	if (self.refBaseClassPath.isDefined() and self.refBaseClassPath.length() > 0)
	{
		var baseClass : SystemUnitClass; 
		searchParent = true; 
		mapPath = parsePath(self.refBaseClassPath);
		if(self.searchItem(mapPath, searchParent, mirrorSearch, retMap, "SystemUnitClass"))
		{
			baseClass = retMap.get("obj");
			return baseClass.isClassRoleOf(retMap);			
		}
	}	
	
	return false;
}



@Cached
operation getInterfaceClass(className : String) : InterfaceClass
{
	var collIC = InterfaceClass.getAllOfType();
	
	for (interfaceClass : InterfaceClass in collIC)
	{
		if (interfaceClass.name == className)
			return interfaceClass;
	}
	
	return null;
}



@Cached
operation getInternalElement(ID : String) : InternalElement
{
	var colIE = InternalElement.getAllOfType();
	
	for (ie : InternalElement in colIE)
	{
		if(ie.ID == ID)
		{
		 	return ie;
		}		 		
	}
	return null;
}


operation InternalLink isRefPartnerPathValid() : String
{
	var searchParent : Boolean = false;
	var mirrorSearch : Boolean = false;	
	var errorTxt : String;
	var retA : Boolean;
	var retB : Boolean;
	var mapPathSideA : Map;
	var mapPathSideB : Map;	
	var retMapA : Map; 
	var retMapB : Map;
	var errorMsg : String = "";
	
	mapPathSideA = parsePath(self.refPartnerSideA);			
	mapPathSideB = parsePath(self.refPartnerSideB);

	retA = self.searchItem(mapPathSideA, searchParent, mirrorSearch, retMapA, "");
	retB = self.searchItem(mapPathSideB, searchParent, mirrorSearch, retMapB, "");
	
	if (not retA)
		errorMsg = retMapA.get("ErrorMsg");
		
	if (not retB)
		errorMsg += retMapB.get("ErrorMsg");
		
	
	return errorMsg;
}







operation CAEXObject isRefBaseSystemUnitPathValid(pathMap : Map) : String
{	
	var searchParent : Boolean = false;
	var mirrorSearch : Boolean = true;
	var errorTxt : String;
	var ret : Boolean;
	var retMap : Map; 
	

	ret = self.searchItem(pathMap, searchParent, mirrorSearch, retMap, "SystemUnitClass");
		
	if (ret = false)
		return retMap.get("ErrorMsg");
	else 
		return "";
}

operation CAEXBasicObject IsRoleClassPathValid(pathMap : Map) : String
{
	var searchParent : Boolean = false;
	var mirrorSearch : Boolean = false;
	var errorTxt : String;
	var ret : Boolean;
	var retMap : Map; 

	ret = self.searchItem(pathMap, searchParent, mirrorSearch, retMap, "RoleClass");
	
	if (ret = false)
		return retMap.get("ErrorMsg");
	else 
		return "";	
}


operation CAEXObject getLibType() : String
{
	if(self.isTypeOf(InterfaceClass))
		return "InterfaceClass";
	
	if(self.isTypeOf(RoleClass))
		return "RoleClass";
	
	if(self.isTypeOf(SystemUnitClass))
		return "SystemUnitClass";
		
	if(self.isTypeOf(ExternalInterface))
		return "InterfaceClass";
	
}


operation CAEXObject isRefBaseClassPathValid(pathMap : Map, libType : String) : String
{
	var searchParent : Boolean = true;
	var mirrorSearch : Boolean = false;
	var errorTxt : String;
	var ret : Boolean;
	var retMap : Map;
	var obj : CAEXObject;
	

	ret = self.searchItem(pathMap, searchParent, mirrorSearch, retMap, libType);
	
	if (ret = false)
	{
		return retMap.get("ErrorMsg");
	}
	
	return "";
}

operation searchAttribute(setAttribute : OrderedSet, attributName : String, searchRecursive : Boolean, retMap : Map) : Boolean
{
	for (attribut : Attribute in setAttribute)
	{
		if(attribut.name == attributName)
		{
			retMap.put("Attr", attribut);
			return true;
		}
	}
	
	return false;	

}




operation CAEXBasicObject searchItem (pathMap : Map, searchParentNode : Boolean, mirrorSearch : Boolean, retMap : Map, libType : String) : Boolean
{
	var lib : String;
	var path : Sequence;
	var libAlias : String;
	var identifier : String;
	var interface : String;
	
	var obj : CAEXBasicObject;
	var library : CAEXObject = null;
	var class : CAEXObject = null;	
	var bFound: Boolean = false;
	
	lib    = pathMap.get("Lib");
	path   = pathMap.get("Path");
	libAlias = pathMap.get("Alias");	
	identifier = pathMap.get("Identifier");
	interface = pathMap.get("Interface");
			
	if (interface.Length() != 0)
	{
		var element : SystemUnitClass; 
		element = self.eContainer();
		//Ausgangsbasis der Suche ist der Parent vom InternalLink
						
		for (actPath : String in path)
		{
			bFound = false;
			for(actElement : SystemUnitClass in element.internalElement)
			{
				if(actPath == actElement.ID)
				{
					bFound = true;
					element = actElement;
					break;
				}
			}
		}		
		
		if(bFound == false)
		{
			retMap.put("MissingObject", path);
			retMap.put("ErrorMsg", "Element not found");
			return false;			
		}
		
		
		for (actInterface : ExternalInterface in element.externalInterface)
		{
			if(actInterface.name =  interface)
			{
				retMap.put("obj", element);
				return true;
			}
		}
		
		retMap.put("MissingObject", interface);
		retMap.put("ErrorMsg", "Interface not found");
		return false;
	}	
	
			
	if (libAlias.Length() == 0 and lib.Length() == 0 and path.size() == 0 and identifier.size() > 0 and mirrorSearch = true)
	{	
		//MirrorSearch -> Suche erfolgt lediglich über ID des IE
		obj = getInternalElement(identifier);
		//Eine Referenz auf eine andere Instanz kann "überall" hinzeigen
		if (obj == null)
		{
			retMap.put("MissingObject", identifier);
			retMap.put("ErrorMsg", "Internal Element with ID = " + identifier + " not found");
			return false;
		}	
		else
		{
			retMap.put("obj", obj);
			return true;
		}
	}	
	
	if(libAlias.Length() == 0 and lib.Length() != 0)
	{
		//Aktuelles File komplett durchsuchen
		obj = self.getCAEXFile();
					
	}
	else if (libAlias.Length() == 0 and lib.Length() == 0 and searchParentNode == true)
	{
		//Parent prüfen
		obj = self.eContainer();	
	}	
	else
	{
		//Referenziertes Modell überprüfen
		obj = mapAliasToCAEXObj.get(libAlias);	
			
	}
			
	if (obj.isTypeOf(CAEXFile))
	{	
		//library = self.getLibrary(lib, obj);
		library = getLibrary(libType, lib, obj);
		
		if(library == null)
		{
			retMap.put("MissingObject", lib);
			retMap.put("ErrorMsg", self.errorLibNotFound(lib));
			return false;
		}			
		
		for(aktPath : String in path)
		{	
			if(class == null)
				class = library.getClass(aktPath);
			else //Bis zum direkten Parent suchen
				class = class.getClass(aktPath);	
				
				
			if(class == null)
			{
				retMap.put("MissingObject", aktPath);
				retMap.put("ErrorMsg", self.errorClassNotFound(aktPath));
				return false;
			}				
		}
		
		// und nun prüfen ob die Klasse existiert
		
		if (class == null)
		{	//Es hat keine Navigation stattgefunden
			class = library.getClass(identifier);
		}
		else
		{
			class = class.getClass(identifier);
		}
				
		if(class == null)
		{
			retMap.put("MissingObject", identifier);
			retMap.put("ErrorMsg", self.errorClassNotFound(identifier));
			return false;
		}
		else
		{
			retMap.put("obj", class);
		}
	}	
	else
	{				
		//Lib irrelevant - nur direkten Parent durchsuchen
		if (obj.name != identifier)
		{
			retMap.put("MissingObject", identifier);
			retMap.put("ErrorMsg", self.errorClassNotFound(identifier));
			return false;
		}
		else
			retMap.put("obj", obj);
	}
	
	return true;
}



operation debugOutput(text : String)
{
	text.println();	
}




operation getDuplicateCAEXObjects(objects : OrderedSet) : Sequence
{
	var duplicates : Sequence;
	var keyMap : Map;
	var objName : String;
		
	
    for(obj : CAEXObject in objects)
	{
		objName = obj.name;
		
		if(not keyMap.containsKey(objName))
		{	
			keyMap.put(objName, objName);
		}
		else
		{
			duplicates.add(objName);
		}	
	}		
		
	return duplicates;
}


operation Sequence getAsCommaSeparatedString() : String
{
	var retString : String;
	
 	for (element : String in self)
 	{
 		if(not retString.isEmpty())
 			retString += ", ";
 		retString += element;
 	}
 		
 	return retString;
}


operation CAEXBasicObject getCAEXFile() : CAEXFile
{
	var actNode : CAEXBasicObject;
		
	actNode = self;
	
	while (not actNode.isTypeOf(CAEXFile))
	{
		actNode = actNode.eContainer();	
	}
		
	return actNode;	
}


/* No idea how to implement that as RegEx */
operation parsePath(path : String) : Map
{
	var Alias : String;
	var Lib : String;
	var Class : String;
	var objectMap : Map;
	
	var Token : String;
	var Attribut : String;
	var Interface : String;
	var Identifier : String;
	var aktChar : String;
	
	var Path : Sequence;
	var i : Integer = 0;
		
	var inBracket : Boolean = false;	
	var LibModus : Boolean = true;
	
	var LastTokenBegin : Integer = 0;
	
		
	while (i < path.length())
	{
		aktChar = "" + path.charAt(i);				
		
		if(aktChar = "[")
		{
			inBracket = true;			
		}else		
		if(aktChar = "]")
		{
			inBracket = false;			
		}else		
		if(aktChar = "/" and inBracket = false)
		{
			Token = replaceChars(path.substring(LastTokenBegin, i));
			
			if(LibModus)
			{
				Lib = Token;								
				LibModus = false;				
			}
			else
				Path.add(Token);			
						
			LastTokenBegin = i+1;
		}else				
		if(aktChar = "@" and inBracket = false)
		{
			Alias = replaceChars(path.substring(LastTokenBegin, i));
			LastTokenBegin = i+1;
		}else		
		if(aktChar = "." and inBracket = false)
		{
			Token = replaceChars(path.substring(LastTokenBegin, i));		
			
			Path.add(Token);
			LastTokenBegin = i+1;
			
			Attribut = replaceChars(path.substring(LastTokenBegin, path.length()));
						
			LastTokenBegin = path.length();
			
		}else		
		if(aktChar = ":" and inBracket = false)
		{
		 	Token = replaceChars(path.substring(LastTokenBegin, i));			
			
			Path.add(Token);
			LastTokenBegin = i+1;
			Interface = replaceChars(path.substring(LastTokenBegin, path.length()));
						
			LastTokenBegin = path.length();			
		}
		
		i = i + 1;
	}
	
	if(LastTokenBegin <> i)
	{
		Token = replaceChars(path.substring(LastTokenBegin, i));	
		
		Identifier = Token;
	}			
	
	objectMap.put("Alias", Alias);
	objectMap.put("Lib", Lib);
	objectMap.put("Path", Path);
	objectMap.put("Attribut", Attribut);
	objectMap.put("Interface", Interface);	
	objectMap.put("Identifier", Identifier);
		
	return objectMap;
}

operation replaceChars(token : String) : String
{
	token = token.replace("\\[", "");
	token = token.replace("\\]", "");
	
	return token;
}


operation CAEXObject isAMLBaseClass() : Boolean
{
	var ret : Boolean = false;
	
	if(self.isTypeOf(SystemUnitClass) or
	   self.isKindOf(InterfaceClass) or 
	   self.isTypeOf(RoleClass))
	  
	   ret = true;
	
	return ret;
}


operation SystemUnitClass errorLibNotFound(lib : String) : String
{
	return "SystemUnitClassLib " + lib + " not found";
}

operation RoleClass errorLibNotFound(lib : String) : String
{
	return "RoleClassLib " + lib + " not found";
}

operation RoleRequirements errorLibNotFound(lib : String) : String
{
	return "RoleClassLib " + lib + " not found";
}

operation SupportedRoleClass errorLibNotFound(lib : String) : String
{
	return "RoleClassLib " + lib + " not found";
}


operation InterfaceClass errorLibNotFound(lib : String) : String
{
	return "InterfaceClassLib " + lib + " not found";
}


operation SystemUnitClass errorClassNotFound(class : String) : String
{
	return "SystemUnitClass " + class + " not found";
}


operation SupportedRoleClass errorClassNotFound(class : String) : String
{
	return "SupportedRoleClass " + class + " not found";
}

operation RoleClass errorClassNotFound(class : String) : String
{
	return "RoleClass " + class + " not found";
}

operation InterfaceClass errorClassNotFound(class : String) : String
{
	return "InterfaceClass " + class + " not found";
}

operation InterfaceClassLib errorVersionNotFound() : String
{
	return "<InterfaceClassLib>" + self.name + ".Version not found";
}

operation SystemUnitClassLib errorVersionNotFound() : String
{
	return "<SystemUnitClassLib>" + self.name + ".Version not found";
}

operation RoleClassLib errorVersionNotFound() : String
{
	return "<RoleClassLib>" + self.name + ".Version not found";
}

operation InterfaceClassLib errorVersionEmpty() : String
{
	return "<InterfaceClassLib>" + self.name + ".Version empty";
}

operation SystemUnitClassLib errorVersionEmpty() : String
{
	return "<SystemUnitClassLib>" + self.name + ".Version empty";
}

operation RoleClassLib errorVersionEmpty() : String
{
	return "<RoleClassLib>" + self.name + ".Version empty";
}




operation getLibrary(libType : String, lib: String, caexFile : CAEXFile) : CAEXObject
{
	var ret : CAEXObject = null;

	if (libType == "RoleClass")
	{
		for (actRCL : RoleClassLib in caexFile.roleClassLib)
		{
			if (actRCL.name == lib)
			{			
				ret = actRCL;
				break;
			}			
		}			
	}else
	if (libType == "SystemUnitClass")
	{
		for (actSUCL : SystemUnitClassLib in caexFile.systemUnitClassLib)
		{
			if (actSUCL.name == lib)
			{
				ret = actSUCL;
				break;
			}			
		}	
	}else
	if (libType == "InterfaceClass")
	{
		for (actIFCL : InterfaceClassLib in caexFile.interfaceClassLib)
		{
			if (actIFCL.name == lib)
			{
				ret = actIFCL;
				break;
			}			
		}
	}
	
	
	return ret;
}


operation SystemUnitClass getClass(class : String) : SystemUnitClass
{
	var ret : SystemUnitClass = null;
	 
	for (actSUC : SystemUnitClass in self.systemUnitClass)
	{		
		if (actSUC.name == class)
			ret = actSUC;			
	}

	return ret;
}

operation RoleClass getClass(class : String) :RoleClass
{
	var ret : RoleClass = null;
	 
	for (actRC : RoleClass in self.roleClass)
	{		
		if (actRC.name == class)
			ret = actRC;			
	}

	return ret;
}

operation InterfaceClass getClass(class : String) :InterfaceClass
{
	var ret : InterfaceClass = null;
	 
	for (actIC : InterfaceClass in self.interfaceClass)
	{		
		if (actIC.name == class)
			ret = actIC;			
	}

	return ret;
}

operation SystemUnitClassLib getClass(class : String) : SystemUnitClass
{	
	var ret : SystemUnitClass = null;
	 
	for (actSUC : SystemUnitClass in self.systemUnitClass)
	{		
		if (actSUC.name == class)
			ret = actSUC;			
	}

	return ret;
}

operation RoleClassLib getClass(class : String) :RoleClass
{
	var ret : RoleClass = null;
	 
	for (actRC : RoleClass in self.roleClass)
	{		
		if (actRC.name == class)
			ret = actRC;			
	}

	return ret;
}

operation InterfaceClassLib getClass(class : String):InterfaceClass
{
	var ret : InterfaceClass = null;
	 
	for (actIC : InterfaceClass in self.interfaceClass)
	{		
		if (actIC.name == class)
			ret = actIC;			
	}

	return ret;
}


operation ValidationModel!ValidationExecution addError(modelName : String, expectedValue : String, actualValue : String, constraintName : String, additionalInfo : String) : String
{
	var error : new ValidationModel!ValidationError;
			
	error.ModelFileName = modelName;
	error.ExpectedValue = expectedValue;
	error.ActualValue = actualValue;
	error.ConstraintName = constraintName;
	error.AdditionalInformation = additionalInfo;
			
	self.ValidationErrors.add(error);
	return self.asString();
}

operation ValidationModel!ValidationExecution addErrors(modelName : String, constraintName : String, validationErrors : Sequence) : String
{
	for (validationError : String in validationErrors)
	{
		var error : new ValidationModel!ValidationError;
			
		error.ModelFileName = modelName;
		error.ExpectedValue = "";
		error.ActualValue = "";
		error.ConstraintName = constraintName;
		error.AdditionalInformation = validationError;
			
		self.ValidationErrors.add(error);
	}
	return self.asString();
}

