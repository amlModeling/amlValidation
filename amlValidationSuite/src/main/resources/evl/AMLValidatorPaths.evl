import "AMLValidatorUtils.evl";

context CAEX!InternalElement
{
	constraint IsRefBaseSystemUnitPathValid
	{
	
		guard: self.refBaseSystemUnitPath.isDefined()
	
	
		check
		{
			debugOutput("IsRefBaseSystemUnitPathValid: " + self);
			
			var mapPath : Map;			
			var validationError : String;	
			var caexFile : CAEXFile;			
		
			caexFile = self.getCAEXFile();
			mapPath = parsePath(self.refBaseSystemUnitPath);			
									
			validationError = self.isRefBaseSystemUnitPathValid(mapPath);
			return validationError.Length() == 0;	
		}		
		message
		{
			return ValidationExecution.addError(caexFile.filename, "", "", "IsRefBaseSystemUnitPathValid", "RefBaseSystemUnitPath not valid: " + validationError);
		}			 
	}
}



context CAEX!SupportedRoleClass
{
	constraint IsRefRoleClassPathValid
	{
		check
		{
			debugOutput("IsRefRoleClassPathValid: " + self);
		
			var mapPath : Map;			
			var validationError : String;	
			var caexFile : CAEXFile;			
		
			caexFile = self.getCAEXFile();		
						
			mapPath = parsePath(self.refRoleClassPath);
			validationError = self.IsRoleClassPathValid(mapPath);
			return validationError.length() == 0;	
		}
		
		message
		{			
			return ValidationExecution.addError(caexFile.filename, "", "", "IsRefRoleClassPathValid", "RefRoleClassPath not valid: " + validationError);
		}
	}
}

context CAEX!RoleRequirements
{
	constraint IsRefBaseRoleClassPathValid
	{
		check
		{
			debugOutput("IsRefBaseRoleClassPathValid: " + self);
			
			var mapPath : Map;			
			var validationError : String;	
			var caexFile : CAEXFile;			
		
			caexFile = self.getCAEXFile();		
							
			mapPath = parsePath(self.refBaseRoleClassPath);
			
			validationError = self.IsRoleClassPathValid(mapPath);
			return validationError.length() == 0;	
		}
		
		message
		{
			return ValidationExecution.addError(caexFile.filename, "", "", "IsRefBaseRoleClassPathValid", "RefBaseRoleClassPath not valid: " + validationError);			
		} 
	}
}

context CAEX!CAEXObject
{
	constraint IsRefBaseClassPathValid
	{
		guard: self.isAMLBaseClass() 
		
		check
		{
			debugOutput("IsRefBaseClassPathValid: " + self);
			
			if (not self.refBaseClassPath.isDefined())
				return true; 
		
			var mapPath : Map;			
			var validationError : String;	
			var caexFile : CAEXFile;
			var libType : String; 
			
			caexFile = self.getCAEXFile();			
			mapPath = parsePath(self.refBaseClassPath);
			
			libType = self.getLibType();	
			validationError = self.isRefBaseClassPathValid(mapPath, libType);
			return validationError.length() == 0;	
		}		
		message
		{
			return ValidationExecution.addError(caexFile.filename, "", "", "IsRefBaseClassPathValid", "RefBaseClassPath not valid: " + validationError);
		}			 
	}
}

context CAEX!InternalLink
{
	constraint ArePartnerSidePathsValid
	{	
		check
		{
			debugOutput("ArePartnerSidePathsValid: " + self);
			
			var caexFile : CAEXFile;
			var validationError : String;
			
			caexFile = self.getCAEXFile();
			validationError = self.isRefPartnerPathValid();
						
			return validationError.length() == 0;
		}		
		
		message 
		{
			return ValidationExecution.addError(caexFile.filename, "", "", "ArePartnerSidePathsValid", "InternalLinkPaths not valid: " + validationError);
		}	
	}
}


context CAEX!InternalElement
{
	constraint ArePropertySetMappingsValid
	{
		guard: self.isPropertySetInstance() and self.roleRequirements.satisfies("IsRefBaseRoleClassPathValid")
		
		check
		{
			debugOutput("ArePropertySetMappingsValid: " + self);
		
			var bRet : Boolean;
			var mapPath : Map;				
			var ergMap : Map;
			var caexFile : CAEXFile;
			var attr : Attribute;		 	
			var errorText : String;
			
			caexFile = self.getCAEXFile();
			
			errorText = self.checkPropertySetMappings(ergMap);
			return errorText.length() == 0;				
		
		}	
							
		message: ValidationExecution.addError(caexFile.filename, "", "", "ArePropertySetMappingsValid", errorText)
	}
	
}



operation InternalElement checkPropertySetMappings(ergMap : Map) : String
{
	var base = self.eContainer();
	var errorText : String;	
	var rc : RoleClass;
	
	var searchParent : Boolean = false;
	var mirrorSearch : Boolean = false;
	var ret : Boolean;
	var retMap : Map;
	var mapPath : Map;
	var foundAttributeRC : Boolean;
	var foundAttributeIC : Boolean;
	var foundRoleRequirement : Boolean;	
		
	mapPath = parsePath(self.roleRequirements.refBaseRoleClassPath);
	
	self.searchItem(mapPath, searchParent, mirrorSearch, retMap, "RoleClass");
	rc = retMap.get("obj");
	
	for (mappedFacetAttribute : AttributeNameMapping in self.mappingObject.attributeNameMapping)
	{
		foundRoleRequirement = false;
		mappedFacetAttribute.println();
		
		foundAttributeRC = searchAttribute(rc.attribute, mappedFacetAttribute.roleAttributeName, true, retMap);
		foundAttributeIC = searchAttribute(base.attribute, mappedFacetAttribute.systemUnitAttributeName, true, retMap);
		
		foundAttributeRC.println();
		foundAttributeIC.println();
		
		
		if (not foundAttributeRC)
			errorText += mappedFacetAttribute.roleAttributeName + " not found in RC ";
		
		if (not foundAttributeIC)		
			errorText += mappedFacetAttribute.systemUnitAttributeName + " not found in IE ";
			
		if (foundAttributeRC == true and foundAttributeIC == true)
		{
		
			foundRoleRequirement = searchAttribute(self.roleRequirements.attribute, mappedFacetAttribute.roleAttributeName, true, retMap);
			if (not foundRoleRequirement)
				errorText += mappedFacetAttribute.roleAttributeName + " not found in RoleRequirements ";
		
		}
	}
	
	errorText = errorText.trim();
	
	return errorText;
	

}






