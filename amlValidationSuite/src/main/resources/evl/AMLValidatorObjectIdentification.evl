import "AMLValidatorUtils.evl";

context CAEX!CAEXFile
{
	constraint IsInterfaceClassLibUnique
	{
		/* Same libraries of different versions are forbidden to be stored in the same AML file.*/		
		
		check
		{
			 var duplicateLibs : Sequence;			 
			 duplicateLibs = getDuplicateCAEXObjects(self.interfaceClassLib);			 
			 return duplicateLibs.isEmpty();			 
		}		
		message
		{
			 return ValidationExecution.addError(self.filename, "", "", "IsInterfaceClassLibUnique", "InterfaceClassLibNames not unique: Duplicates: " + duplicateLibs.getAsCommaSeparatedString());
		}	
	}
	
	constraint IsRoleClassLibUnique
	{
		/* Same libraries of different versions are forbidden to be stored in the same AML file.*/		
		
		check
		{
			 var duplicateLibs : Sequence;			 
			 duplicateLibs = getDuplicateCAEXObjects(self.roleClassLib);			 
			 return duplicateLibs.isEmpty();			 
		}		
		message
		{
			 return ValidationExecution.addError(self.filename, "", "", "IsRoleClassLibUnique", "RoleClassLibNames not unique: Duplicates: " + duplicateLibs.getAsCommaSeparatedString());
		}	
	}
	
	constraint IsSystemUnitClassLibUnique
	{
		/* Same libraries of different versions are forbidden to be stored in the same AML file.*/		
		
		check
		{
			 var duplicateLibs : Sequence;			 
			 duplicateLibs = getDuplicateCAEXObjects(self.systemUnitClassLib);			 
			 return duplicateLibs.isEmpty();			 
		}		
		message
		{
			 return ValidationExecution.addError(self.filename, "", "", "IsSystemUnitClassLibUnique", "SystemUnitClassLibNames not unique: Duplicates: " + duplicateLibs.getAsCommaSeparatedString());
		}	
	}	
}




context CAEX!InterfaceClassLib
{
	constraint IsInterfaceClassNameUnique
	{
		/*  This name shall be unique within the hierarchy level of the corresponding AML library over
			the life time of the class.*/
		check
		{
			var duplicates = getDuplicateCAEXObjects(self.interfaceClass);
			return duplicates.isEmpty();
		}
	
		message: ValidationExecution.addError(self.eContainer.filename, "", "", "IsInterfaceClassNameUnique", "InterfaceClassLib=" + self.name + ": Duplicate Class Names: " + duplicates.getAsCommaSeparatedString())
	}
}


context CAEX!SystemUnitClassLib
{
	constraint IsSystemUnitClassNameUnique
	{
		/*  This name shall be unique within the hierarchy level of the corresponding AML library over
			the life time of the class.*/
		check
		{
			var duplicates = getDuplicateCAEXObjects(self.systemunitclass);
			return duplicates.isEmpty();
		}
	
		message: ValidationExecution.addError(self.eContainer.filename, "", "", "IsSystemUnitClassNameUnique", "SystemUnitClassLib=" + self.name + ": Duplicate Class Names: " + duplicates.getAsCommaSeparatedString())
	}
}




context CAEX!RoleClassLib
{
	constraint IsRoleClassNameUnique
	{
		/*  This name shall be unique within the hierarchy level of the corresponding AML library over
			the life time of the class.*/
		check
		{
			var duplicates = getDuplicateCAEXObjects(self.roleclass);		
			return duplicates.isEmpty();
		}
	
		message: ValidationExecution.addError(self.eContainer.filename, "", "", "IsRoleClassNameUnique", "RoleClassLib=" + self.name + ": Duplicate Class Names: " + duplicates.getAsCommaSeparatedString()) 
	}
}

context CAEX!InternalElement
{
	constraint HasID
	{
		/* According to IEC 62424:2008, A.3.15, the tag “ID” is not mandatory in contrast to this part of IEC 62714.*/
		
		check: self.id.isDefined()
		
		message
		{
			var caexFile : CAEXFile;
			caexFile = self.getCAEXFile();		
			
			return ValidationExecution.addError(caexFile.filename, "", "", "HasID", "InternalElement " + self.name + " without ID defined");
		}	
	}
	
	
	constraint IsIDGUID
	{
		guard: self.satisfies("HasID")
		
		check 
		{
			var caexFile : CAEXFile;
			caexFile = self.getCAEXFile();
			return getAnzForID(self.ID) == 1;
		}
		
		message: ValidationExecution.addError(caexFile.filename, "", "", "IsIDGUID", "InternalElement " + self.name + " has a non unique ID: " + self.ID)		
	}
}

context CAEX!ExternalInterface
{
	constraint HasID
	{
		/* According to IEC 62424:2008, A.3.15, the tag “ID” is not mandatory in contrast to this part of IEC 62714.*/
			
		check:	self.id.isDefined()
		
		message
		{
			var caexFile : CAEXFile;
			caexFile = self.getCAEXFile();
			
			return ValidationExecution.addError(caexFile.filename, "", "", "HasID", "ExternalInterface " + self.name + " without ID defined");
		}	
	}
	
	constraint IsIDGUID
	{
		guard: self.satisfies("HasID")
		
		check 
		{
			var caexFile : CAEXFile;
			caexFile = self.getCAEXFile();
			return getAnzForID(self.ID) == 1;
		}
		
		message: ValidationExecution.addError(caexFile.filename, "", "", "IsIDGUID", "ExternalInterface " + self.name + " has a non unique ID: " + self.ID)		
	}
}




