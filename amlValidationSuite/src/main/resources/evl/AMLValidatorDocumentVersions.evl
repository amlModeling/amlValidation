import "AMLValidatorUtils.evl";

context CAEX!CAEXFile
{
	constraint HasElementAdditionalInformation
	{
		/* The CAEX root element “CAEXFile” of each AML top level document shall have the CAEX
		child element “AdditionalInformation”.												*/		
	
		check
		{
			return not self.AdditionalInformation.isEmpty();	
		}
		
		message: ValidationExecution.addError(self.filename, "", "", "HasElementAdditionalInformation", "No element <AdditionalInformation> defined")
	}	
	
			
	constraint HasAttributeAutomationMLVersion
	{
		
		/* The element “AdditionalInformation” shall have an attribute “AutomationMLVersion”. */
		
		guard: self.satisfies("HasElementAdditionalInformation")		
		
		check
		{
			var automationMLVersions = self.getAutomationMLVersionElements();						
			return automationMLVersions.size() = 1;
		}		  
					
		message
		{
		   return ValidationExecution.addError(self.filename, "", "", "HasAttributeAutomationMLVersion", "No or multiple Attributes <AdditionalInformation>.AutomationMLVersion defined");			
		} 
	}
		
	
	constraint HasCorrectAutomationMLVersion
	{
		/* The value of this attribute “AutomationMLVersion” shall be stored in the XML document. It
		   shall be “2.0” to correspond to this standard. 
		*/ 
		
		guard: self.satisfies("HasAttributeAutomationMLVersion")
		
		check
		{ 			
			var documentAMLVersion = self.getAutomationMLVersion();
			return documentAMLVersion == getValidAutomationMLVersion();
		}		  
		
		message
		{	
			return ValidationExecution.addError(self.filename, getValidAutomationMLVersion(), documentAMLVersion, "HasCorrectAutomationMLVersion", "");								 
		} 
	}
	
//	Not necessary as this implementation allows only AML Version 2.0
//	constraint HasAutomationMLVersionOfRootModel
//	{
//		 Every referenced CAEX document shall follow the same AML version of the root document.
//		   Mixing of documents with different AML versions is explicitly forbidden.
//		
//			
//		guard: self.satisfies("HasAttributeAutomationMLVersion")
//		
//		check 
//		{			
//			var documentAMLVersion = self.getAutomationMLVersion();
//			return getAutomationMLVersionOfRootModel() = documentAMLVersion;
//		}	
//		
//		message
//		{	
//			return ValidationExecution.addError(self.filename, getAutomationMLVersionOfRootModel(), documentAMLVersion, "HasAutomationMLVersionOfRootModel", "<AdditionalInformation>.AutomationMLVersion not consistent with RootModel-AutomationMLVersion");						 
//		}				
//	}
	
	
	
	
} 


context CAEX!CAEXObject
{
	constraint HasElementLibraryVersion
	{
		/* Every AML standard library and every user defined AML library shall define its version
			number utilizing the CAEX element “Version”.
		  This constraints assures that the attribut "version" is definied
		*/
		
		guard: self.isTypeOf(InterfaceClassLib) or
			   self.isTypeOf(SystemUnitClassLib) or
			   self.isTypeOf(RoleClassLib)
			   
		check: self.version.isDefined()
		
		message
		{
			return ValidationExecution.addError(self.eContainer.filename, "", "", "HasElementLibraryVersion", self.errorVersionNotFound());
		} 
	}
	
	constraint HasLibraryVersion
	{
		/* Every AML standard library and every user defined AML library shall define its version
		   number utilizing the CAEX element “Version”.
		   This constraints assures that the attribut "version" is filled
		*/
		
		guard: self.satisfies("HasElementLibraryVersion") and 
		       (self.isTypeOf(InterfaceClassLib) or
			   self.isTypeOf(SystemUnitClassLib) or
			   self.isTypeOf(RoleClassLib))
			   
		check: self.version.value <> ""
		
		message
		{
			return ValidationExecution.addError(self.eContainer.filename, "", "", "HasLibraryVersion", self.errorVersionEmpty());
		} 
	}
}

/******************************************************************************************************************************************/

//operation getAutomationMLVersionOfRootModel() : String
//{
//	return mapAliasToCAEXObj.get("RootModel").getAutomationMLVersion();
//}

@Cached
operation CAEXFile getAutomationMLVersionElements() : Sequence
{
	var elements : Sequence;	
						
	for(additionalInformation : Element in self.AdditionalInformation)
	{		
		var attributes = additionalInformation.attributes.asSequence();
		
		if (attributes.size <> 1) //Keine Attribute oder mehrere Attribute im Element -> ungültig
			continue;
		
		for (attribut : Element in attributes)
		{	
			if(attribut.name == "AutomationMLVersion")
				elements.add(attribut);
		}
	}	
	
	return elements;	
}

operation CAEXFile getAutomationMLVersion() : String
{
	var elements = self.getAutomationMLVersionElements();
	
	return elements.first().value;
}

operation getValidAutomationMLVersion() : String
{
	return "2.0";
}
